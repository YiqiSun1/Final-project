# -*- coding: utf-8 -*-
"""Final_Project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQdM_NO1XajzAUr-PeZ3wX-c9UBVMD7W
"""

#Code that models whether a person can get into a club, depending on their age, money, and if the club is full

#Queue class
class Queue:

    def __init__(self):
        self.queue = []
        self.size = 0

    def enqueue(self, item):
        self.queue.append(item)
        self.size += 1

    def dequeue(self):
        if len(self.queue) < 1:
            return None
        self.size -= 1
        return self.queue.pop(0)

    def display(self):
        for person in self.queue:
            person.display()

    def get_size(self):
        return self._size

    def front(self):
        if len(self.queue) > 0:
            return self.queue[0]
        else:
            return None

#Person class with name, age, and money attributes
class Person:
    def __init__(self, name, age, money):
        self.name = name
        self.age = age
        self.money = money
        self.next = None

    def display(self):
        print("name:", self.name, "age:", self.age, "money:", self.money)


#creates outside queue and inside list
outsidequeue = Queue()
inside = []

#insert code for creating new people with user input here
p1 = Person("Kevin", 21, 80)
p2 = Person("Andy", 20, 110)
p3 = Person("Floribert", 20, 90)

#adds people to outside queue
outsidequeue.enqueue(p1)
outsidequeue.enqueue(p2)
outsidequeue.enqueue(p3)
outsidequeue.display()

#function for checking if inside is full
def checkisfull(inside):
    if len(inside) > 10:
        return True
    return False

#code to check person
def checkperson(outsidequeue, inside):
    front = outsidequeue.front()
    name = front.name
    age = front.age
    money = front.money
    if checkisfull(inside) == False:
        if age >= 21:
            inside.append(outsidequeue.dequeue())
            front.money -= 10 #pays $10 to get in
            print(name, "paid $10 to get into club")
        elif money >= 100:
            inside.append(outsidequeue.dequeue())
            front.money -= 20 #pays $20 to get in
            print(name, "paid $20 to get into club")
    else:
        outsidequeue.dequeue()
        print(name, "did not get into club, left")

#insert code to remove person after they run out of money

#code to display inside
def display_inside(inside):
    for person in inside:
        person.display()

#checks first 3 people
checkperson(outsidequeue, inside)
checkperson(outsidequeue, inside)
checkperson(outsidequeue, inside)

#prints inside and outside
print("Outside Queue:")
outsidequeue.display()
print("Inside:")
display_inside(inside)

